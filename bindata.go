package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _bashenv_bash_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\x5f\x6b\xdb\x30\x14\xc5\x9f\x97\x4f\x71\x22\x02\xde\x60\x89\x61\xe4\x29\x23\x81\x84\x6d\x64\x2f\xf1\x58\xc6\x68\x09\xa1\x28\xf2\x75\x2c\x2a\x4b\x45\x57\x26\xcd\xb7\xaf\xe4\x36\xc5\x4d\xfb\x24\xd0\x3d\xe7\x77\xee\x9f\x81\xae\xb0\xdb\x41\x8c\x56\xcb\xed\xfa\xee\xff\xcf\xbf\xdb\xdf\x9b\x5f\x85\xc0\xd8\x04\x88\xa9\xc0\x7e\xff\x1d\xa1\x26\x3b\xf8\x44\xaa\x76\x10\xc3\x21\x6e\x5d\xeb\xc1\x67\x0e\xd4\x60\x25\xb9\x86\x66\xb8\x36\xc0\x55\x28\x65\xa0\x19\x7a\xac\x62\x23\x7a\xce\x3f\x86\x24\x13\xda\x87\xa3\x97\x25\x21\xb8\x67\xff\x14\xce\xe3\xe8\x29\x9a\xfd\x24\xea\x2f\x2d\x7d\x6e\xad\x6c\xe8\x8b\xc0\x7c\x0e\xf1\x43\xfa\x93\xb6\xfd\x86\x3a\xee\xcb\x03\x51\x58\x14\x5b\xdc\x7c\x45\x1b\x13\xd6\xae\xa1\x83\xa7\x53\x8a\xd0\x96\x83\x34\x06\x26\xe2\x39\x74\x89\x33\x71\xb1\x65\x00\x46\xe8\xa4\x17\xdd\x21\x0a\xb2\x6b\xfa\xbf\x98\x08\x59\x96\xd0\x21\x31\x73\x0a\x2a\xe7\x9a\x8c\x61\x48\x5b\x42\xd5\xd2\x1e\x09\xe7\xb4\x99\x98\xef\x33\x46\x57\xbd\x0e\xe2\xb6\x74\xb1\x82\xb1\x82\xe8\xbe\xf3\x96\x7d\x6e\x9c\x92\x26\x3f\x68\x9b\xa7\x6c\x2c\x16\x7d\xbe\xc8\xde\x22\x54\x9d\xfc\xfc\x91\xf3\x5d\xd7\x4b\xd8\xb4\x03\xf2\x8d\xb6\xd2\x80\x89\x59\x3b\x9b\xee\x95\x36\x18\x8b\x2a\xfe\x48\x7f\x4e\x23\x05\x79\x4f\xa0\xaa\x22\x15\x26\xe2\x15\x54\xe9\x78\xbe\xc7\x38\xf4\xb7\x41\xa5\x9f\x02\x00\x00\xff\xff\xa6\xf0\x15\x87\x2c\x02\x00\x00")

func bashenv_bash_bash_bytes() ([]byte, error) {
	return bindata_read(
		_bashenv_bash_bash,
		"bashenv/bash.bash",
	)
}

func bashenv_bash_bash() (*asset, error) {
	bytes, err := bashenv_bash_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "bashenv/bash.bash", size: 556, mode: os.FileMode(420), modTime: time.Unix(1414687359, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _bashenv_cmd_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x41\x73\x9b\x3c\x10\x3d\xc3\xaf\xd8\x4f\x51\x32\xc9\x81\xe1\xc3\xa7\x0e\x1e\x77\x9c\x69\x7b\x6b\x7b\xc9\xd1\x38\x33\x2a\x88\xc0\x58\x16\x1e\x84\xdd\x74\x30\xff\xbd\xbb\x42\x60\x88\x7d\x6a\x2e\x46\xbb\xab\xdd\xf7\x9e\xde\xc6\xcf\x64\xaa\x44\x2d\x21\x78\x86\x2f\x3f\xbe\xbe\xf8\x7e\xba\xcf\x02\x55\x9a\xe6\xf1\x09\x5a\xdf\x1b\xd2\x99\x34\xe9\x8a\x7d\xc7\xb8\x01\x71\x12\xa5\x12\xbf\x94\x84\xb4\xda\xef\x85\xce\x0c\xbb\x14\x6a\xb3\x62\x3c\xc2\xc0\xd0\x27\xd8\xc9\x3f\x06\x18\xd7\x86\xc1\x19\x8c\xcc\x80\x99\x10\x4f\x71\x18\x32\xbf\xbb\xcc\xb3\x75\xf3\xa1\x63\xaf\xbc\xaa\x61\x07\xa5\xc6\x36\xed\x7f\x04\x73\xb3\xde\x76\x6c\x09\x59\xe5\x7b\x9e\x4c\x8b\x0a\x13\x3b\x02\x51\x69\x89\x43\xde\x6a\x79\x00\xf6\x4a\x43\xec\xcc\xaa\x6e\x66\x93\xb4\x9b\xf3\x2f\x6d\x83\x13\xc4\x1f\x7a\xca\xf7\x03\x9e\x6e\xe9\xf5\xcd\x66\x50\x31\xc8\x8f\x3a\x6d\xca\x4a\x83\xa0\x93\xd3\x6d\x22\x5b\xae\x2d\x55\x4c\xe3\x6f\xbb\x88\x03\x1e\x75\x98\x56\x55\x2a\x94\xd5\xc1\xa9\xa0\x09\x2e\x7f\x9c\x50\x79\x9a\xe3\xcd\x35\x9b\x2a\x10\x30\x78\xf8\x0c\x61\x26\x4f\xa1\x3e\x2a\x05\x0f\x0f\xbd\xaa\xda\xd1\xf2\x3d\xcb\x9b\x9e\x27\xe6\xad\x30\xe1\x1d\x7e\x05\x61\xc7\xb6\x2b\xdb\x6b\xce\x71\x54\xee\xc3\x0b\x39\xba\x7c\x81\x5d\xe5\x09\x11\x63\x90\x0a\x01\x71\xcd\x14\x49\x18\xa7\xdf\x04\xeb\xac\x41\xb4\x01\x1e\x41\xc2\x12\xbe\x4e\x50\x78\xdf\xeb\x9c\x73\xfa\x79\xd0\x3f\xbf\x83\x18\x59\x50\xd1\x88\x69\x00\x73\x11\x09\x93\x4b\x30\x45\x99\x37\x30\x84\xb1\x70\x16\x3f\x9f\xa1\xa9\x8f\x72\x48\x9b\x46\x34\x47\xb3\xfa\xdf\xf7\xca\x1c\x06\x55\x47\xb7\x5a\x19\x5f\x39\xc6\x13\x3e\xd3\x71\x09\x4d\x21\x35\x92\xe0\xed\x44\x3f\xac\x63\xdb\x0e\x6f\xaf\x49\x07\x65\x70\x0a\xb5\xdd\x6c\x30\x44\x39\xd8\x6e\xc7\x8b\xee\xbd\x7e\x56\x60\x8e\x69\x31\x38\x22\x06\x5b\x48\x79\x87\x6c\x41\x4f\xab\x86\x2e\x04\xeb\xba\x09\x7f\xcc\x75\x40\xba\xf6\x15\x4f\x74\x3f\x2f\x9d\x27\x46\x6b\x3c\x5f\xad\x6d\x6c\x0b\xd1\x55\x38\x73\xee\x2b\xd7\xc8\x59\xcb\x3b\xd4\xa5\x6e\x72\x60\x00\xf7\xc1\xe2\x93\x81\x7b\x93\xa0\xcd\x1c\xa9\xd9\xf8\x6b\x39\x7a\x38\xbd\xd7\x46\x40\xef\x65\x03\xbc\x67\xe8\x13\x54\xf7\xa2\x85\x54\x87\x5b\x7b\xf4\x52\x54\xbf\x0d\x50\x16\x61\x22\xe0\xbd\xb0\xbb\x44\xd0\x6f\x2d\x93\xa8\xdf\xc8\x0c\xf4\x0a\x83\x70\x14\x9a\x48\x07\xf8\x37\x30\x27\x92\xd6\x13\xf4\x81\x8b\x7e\x07\x4a\xa0\x02\x78\xa3\x2f\x9b\xd8\xab\xa5\x36\xe1\x3d\x31\x0b\xe9\x1f\x45\x1f\xd4\x18\x82\xf9\x19\xc2\x00\x9d\x3c\xb9\x6e\xf7\xfb\x86\x38\x0e\x89\x0e\x88\x97\x5b\xdf\x68\x34\x8f\x5b\x11\xbb\xfc\x24\xd2\x64\x33\x06\xb9\xac\x2a\xfe\xdf\x00\x00\x00\xff\xff\x4c\x2e\xf9\x29\xc7\x05\x00\x00")

func bashenv_cmd_bash_bytes() ([]byte, error) {
	return bindata_read(
		_bashenv_cmd_bash,
		"bashenv/cmd.bash",
	)
}

func bashenv_cmd_bash() (*asset, error) {
	bytes, err := bashenv_cmd_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "bashenv/cmd.bash", size: 1479, mode: os.FileMode(420), modTime: time.Unix(1414685718, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _bashenv_fn_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x51\x41\x6e\xc2\x30\x10\x3c\xc7\xaf\x18\xad\x22\x01\xaa\xa2\x08\xae\x34\x3d\x56\xea\x1b\x28\x07\xcb\xac\x89\xd5\xd4\x89\x6c\x03\xaa\x28\x7f\xef\x1a\xd2\x92\x43\x55\x55\xb9\x64\x77\x66\x67\x76\xd6\xca\xfa\x4a\x87\x7d\x9c\x2f\x70\x56\xc5\x8e\x4d\xa7\x03\x63\xc7\xd1\x34\xf4\xe2\xe3\xc0\x26\x41\xc3\x1e\xbc\x49\xae\xf7\xb3\x08\x21\x1f\xde\xd9\xa7\x48\xaa\xe8\x7a\xa3\xbb\xdc\xe9\x9c\xe7\xa6\x9c\xa7\x8f\x81\x51\x2e\xf1\x89\x7d\xe0\x01\xdf\x6a\x63\x59\x1d\x41\x53\x03\x12\xa0\x65\xbd\x43\xb5\x5c\xa8\x82\x4d\xdb\xa3\x62\x50\x79\x1e\x05\xeb\x1a\x35\xbd\x7a\xba\x64\xa2\x3e\xbd\xa1\x7a\x6e\x30\xab\x9b\xfa\x3c\x04\xe7\x13\xe8\x91\xca\x25\x3d\xd1\x65\x26\x78\x0a\xc8\x5c\xc8\xa7\x2e\x2a\xa7\xca\x16\xff\x4e\x95\xa1\xe0\x86\x5c\x51\x1e\xc8\x44\xf9\xe1\xa3\xe4\xa3\x5f\x82\x45\x33\x59\x9e\xd6\xb8\x6e\x5f\xe6\xfe\xe8\xee\xbc\xed\xff\x70\x8f\x13\x7b\xba\x73\xac\x6f\x72\x26\xc4\xb6\x3f\xc5\xfe\x10\x0c\x4b\xbd\xa2\xf1\x3a\x54\x5a\x8f\x72\x3e\xbe\x18\xa4\x5a\xfc\x40\xb8\x01\xd7\xcd\x26\x80\x2a\x9c\xc5\x66\x23\xa3\x77\x49\xc2\x76\xbb\x46\x6a\xd9\xab\xa2\xb8\x25\x13\x5d\x39\xa1\x76\x1d\x2a\x8f\x87\x95\xf4\x6f\xc3\xd6\x49\x9c\xaf\x00\x00\x00\xff\xff\x5c\xaf\x12\xe0\x23\x02\x00\x00")

func bashenv_fn_bash_bytes() ([]byte, error) {
	return bindata_read(
		_bashenv_fn_bash,
		"bashenv/fn.bash",
	)
}

func bashenv_fn_bash() (*asset, error) {
	bytes, err := bashenv_fn_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "bashenv/fn.bash", size: 547, mode: os.FileMode(420), modTime: time.Unix(1414685718, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _bashenv_plugn_bash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\x5d\x4f\xe4\x36\x14\x7d\x4e\x7e\xc5\x95\x95\xae\x96\x4a\xd9\xe9\x52\xf5\x09\x6d\xd5\x55\xbb\xa2\x48\xa8\x1a\xf1\xf1\x44\x11\x32\x89\x93\xb1\x70\xec\x28\x76\x06\x68\xe9\x7f\xef\x75\xec\x64\x9c\xc1\x33\x43\xcb\x0b\x64\xee\x97\x8f\xcf\x3d\xf7\x26\x29\x97\xda\x50\x21\x3e\x1e\xc1\xdf\x69\x52\xb2\x42\xd0\x8e\x41\xc9\x74\xf1\x85\x9c\x39\x17\x50\x90\xec\x11\x5a\xd1\xd7\x5c\x42\xd5\xa9\x06\x2d\xa7\xdc\xc0\xf5\xc5\x39\xd9\xe4\xf4\x9d\xf8\x42\xb2\xcf\x04\x24\x6d\x18\x3e\x1d\xa3\xaf\x28\x81\x64\xcb\xf3\xeb\xd3\xb3\x3f\xee\x96\x5f\xaf\x7e\x5f\xd0\x35\xe5\x82\xde\x0b\x86\xce\x1a\x4b\x14\x42\x49\x86\x31\x98\x4c\x20\x3b\x1e\x32\x72\xf8\x19\x16\x25\x5b\x2f\x64\x2f\x44\xfa\x4f\x9a\xf6\x72\x0f\xc8\x0b\xd6\xa8\x35\x9b\xa3\x1b\x0f\xf1\x56\x1d\xa0\x74\x96\x01\x68\x9a\x74\x0d\xe4\x5d\xb5\x05\x91\x49\x9b\x5a\x2e\x32\x17\xba\x2b\x6c\x3a\x64\x13\x88\x50\x05\xd7\x26\x86\xf2\x1c\xed\x60\xb9\x14\xaa\xa0\x22\xc0\xa5\x57\xaa\x35\x90\x6b\xb0\x97\xad\x85\xba\x4f\x93\x4a\x75\xd0\x52\xb3\x02\xbc\xcf\x8e\x23\xbf\x3f\x81\x52\xa5\x49\x12\x56\xc3\x3b\x7d\xbc\xa7\x9a\x59\xfa\x21\xb3\x05\x8e\xc8\x14\x82\xf4\x99\x5e\xdb\x90\x9b\x1b\xc8\x19\xec\xbb\x31\xdc\xde\xc2\x87\x0f\xc0\x8a\x95\x02\xef\x82\x97\x17\xf7\xbb\xe4\x7a\x30\x04\xa5\xd7\xac\xd3\x5c\x0d\xc7\x17\xd4\xb8\x93\x17\xae\xd2\x27\xa3\x1a\x01\x2f\x60\xff\xe5\x35\x33\x40\x3c\x55\x40\x7c\x16\x09\x0a\x39\xa6\xfe\x53\x15\x9b\xd2\xf1\xd6\x4c\x95\xda\x8e\x4b\x83\xad\x02\xf8\x2e\x3f\xfe\x41\xe3\xdf\x9f\xec\x9f\xcf\xf6\x51\xff\x69\x53\xb2\x29\x39\x1b\x31\xe0\xa3\xe3\xc7\x3e\xd9\x92\x56\x2f\xa8\xcb\xa9\x3b\xfd\xa6\x3b\xd8\x63\xd3\xf1\xba\x66\x5d\xac\xcd\x57\xce\xa5\x61\xa5\xd4\x83\xed\xdf\xc8\xdf\x6b\x21\xda\x88\x41\x86\x27\xa0\x57\xbc\x32\xbb\xa5\xe0\x9a\xb2\x2d\x86\xb1\x69\xa3\x14\xd8\x1a\x29\xb4\xec\x29\x59\xf1\x3a\x67\x4f\xad\xea\x90\xc7\x50\x12\x43\xa1\x23\xe4\x09\x20\x49\xac\x0e\x9e\x26\x3a\x16\x99\xc5\x43\x7c\xeb\x67\x46\x8c\xf9\x65\x0f\x21\x89\xa7\x23\xaf\xa9\x61\x8f\xf4\x19\x82\x24\x24\xcb\xc1\x8c\x71\xf5\x6d\xf0\xe0\x2a\x99\xe6\x2c\x3a\xa3\xcd\x43\xc9\x3b\xc8\xdb\xf8\x94\x62\x80\x90\x90\x57\xfa\xe0\x74\x1e\x9a\x72\xc4\xea\xc5\x1d\x03\xfb\x9b\x73\xbd\x1f\x2d\xee\x92\xc3\x40\x7c\x0f\x51\xeb\x31\x2c\xa7\x38\x02\x5e\x14\x2e\xb0\xef\xe8\x30\x01\x51\x4c\xb3\x75\x8c\x93\x35\x3f\xdd\x15\x18\x26\x8c\xcc\x46\x2c\xa0\xcd\x16\x08\x61\x39\x69\x45\x5b\xea\x44\xf7\x76\x70\x6f\x85\xe4\xd5\x4c\x22\x24\xe9\x38\x49\x97\xff\x93\x24\xc0\x31\xea\xed\xe3\x8f\x18\x39\xac\xbc\x5c\xda\x55\x61\xad\x13\x1c\xcd\xf6\x82\x8e\x92\xc7\x25\x8f\x02\x3d\x43\x3b\xa7\x82\xff\x85\xe2\xc2\x7d\xd1\xb4\xe6\x79\x04\x6e\x77\xe0\x4e\x4d\xa1\xc3\xa8\xbe\x58\xed\x01\x32\xa6\xee\xd2\x62\xcc\x1b\xbe\xa0\x87\xeb\x07\x00\x4b\x0f\x6f\x89\xf0\x64\x08\x72\x7b\x39\x0d\x17\xbe\xd3\xaa\xef\x8a\xe8\x34\x5d\x0e\x1e\x6c\x4c\xd3\x50\x59\x6a\xb0\x6b\x6e\x88\xde\x7a\x69\xbf\x67\x23\x8e\x3b\xae\x0a\x76\xdc\xeb\x65\xf8\x49\xaf\x48\xf8\xbe\x23\x0e\x34\x1c\x48\xd9\xfb\x7e\x68\x28\x97\xee\xd6\x56\x27\x39\x53\xd0\xf2\x96\x55\xc8\xeb\x09\x20\x22\x92\x5d\x5d\x7c\xfd\xf5\xdb\x78\xec\x10\xf3\x94\xe2\x24\x34\xe5\xa8\x73\xff\xb9\x33\xb3\x4d\x1f\x41\x33\xab\xfd\xde\x98\x19\xfc\x36\x9e\xd9\x1c\x31\x33\x93\x5f\x75\x33\x9b\x6f\xd8\xc8\x01\x09\x9d\xb9\xd4\x7e\x8e\x80\x2c\xe3\x63\x15\x54\xda\xec\xaf\x98\xd9\xfd\x8a\x79\xf4\x56\x82\x9d\x99\x34\x71\x26\x04\x40\x88\x7f\xad\xfc\x1b\x00\x00\xff\xff\x6a\x00\x61\xb2\xb5\x0a\x00\x00")

func bashenv_plugn_bash_bytes() ([]byte, error) {
	return bindata_read(
		_bashenv_plugn_bash,
		"bashenv/plugn.bash",
	)
}

func bashenv_plugn_bash() (*asset, error) {
	bytes, err := bashenv_plugn_bash_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "bashenv/plugn.bash", size: 2741, mode: os.FileMode(420), modTime: time.Unix(1419749934, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bashenv/bash.bash": bashenv_bash_bash,
	"bashenv/cmd.bash": bashenv_cmd_bash,
	"bashenv/fn.bash": bashenv_fn_bash,
	"bashenv/plugn.bash": bashenv_plugn_bash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"bashenv": &_bintree_t{nil, map[string]*_bintree_t{
		"bash.bash": &_bintree_t{bashenv_bash_bash, map[string]*_bintree_t{
		}},
		"cmd.bash": &_bintree_t{bashenv_cmd_bash, map[string]*_bintree_t{
		}},
		"fn.bash": &_bintree_t{bashenv_fn_bash, map[string]*_bintree_t{
		}},
		"plugn.bash": &_bintree_t{bashenv_plugn_bash, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

