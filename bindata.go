// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// bashenv/bash.bash
// bashenv/cmd.bash
// bashenv/fn.bash
// bashenv/plugn.bash
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bashenvBashBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x51\x8b\x13\x31\x14\x85\x9f\x3b\xbf\xe2\x6c\x58\x18\x05\x77\x07\x64\x9f\x2a\x2d\xb4\xa8\xd4\x97\x8e\x58\x11\xa5\x14\xb9\xcd\xdc\x69\x82\x99\x44\x72\x13\x6a\xff\xbd\x64\xb4\x32\x56\x9f\x02\xc9\x3d\xdf\x39\x39\xb7\xb2\x3d\xf6\x7b\xa8\xfb\xf5\x6a\xb7\xf9\xfa\xe9\xcd\x87\xdd\xbb\xed\xdb\x56\xe1\xc1\x25\xa8\x27\x85\xc3\xe1\x15\x92\x61\x5f\xcd\x58\x9b\x00\x75\x77\x87\x2f\x21\x47\xc8\x45\x12\x0f\x58\x93\x18\x58\x41\xc8\x09\xa1\x47\x47\x89\xe7\x98\xb0\xda\xad\x9a\x28\xdf\x3b\x26\x61\xe4\xef\xa7\x48\x1d\x23\x85\x5f\xfa\x27\x84\x88\x53\x64\x4a\x1c\x1f\x55\x35\xbb\x46\x7a\x96\x3d\x0d\xfc\x5c\x61\xb1\x80\x7a\x4d\xf1\x6c\xfd\x34\xd0\xc8\xfd\x7d\x40\xb5\x1e\xed\x0e\x9f\x5f\x20\x0b\x63\x13\x06\x3e\x46\x3e\x17\x0b\xeb\x25\x91\x73\x70\x94\x58\xd2\xe8\x38\x57\x57\x59\x0d\xe0\x1e\xe3\xe8\x75\xee\x48\x62\xea\x5b\xfa\x47\xc3\x1e\xd4\x75\xb0\xa9\x30\x1b\x4e\xba\x11\xc3\xce\x09\xc8\x77\xd0\x86\xfc\x89\x71\x29\xcd\x64\xe1\x58\x0b\xc6\xd7\x5b\x23\xc9\x5d\x80\x18\x3c\x68\xa8\xf1\xba\xc9\x12\x1b\x17\x34\xb9\xe6\x68\x7d\x53\xbc\xb1\x5c\x4e\xf9\xaa\xfe\x1b\xa1\x4d\xd1\xcb\xff\x94\xff\xa4\x5e\xc1\x97\x0e\x38\x0e\xd6\x93\x83\xb0\x88\x0d\xbe\xec\xab\x34\x08\xcf\x9a\x45\x28\x5e\xca\x97\x12\x7d\x63\x70\xdf\xb3\x4e\x8f\xea\x0f\xa8\xb7\xd5\x8c\x7f\xd8\x84\x97\x55\x6f\xab\x9f\x01\x00\x00\xff\xff\xbe\x15\xe5\x0d\x2d\x02\x00\x00")

func bashenvBashBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvBashBash,
		"bashenv/bash.bash",
	)
}

func bashenvBashBash() (*asset, error) {
	bytes, err := bashenvBashBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/bash.bash", size: 557, mode: os.FileMode(420), modTime: time.Unix(1652927627, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvCmdBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x6e\xdb\x3a\x10\x3c\x93\x5f\x31\x6f\x43\x07\xc9\x41\xd0\x93\x4f\x85\x0d\x17\x09\xda\xde\xda\x5e\x72\x8c\x1d\x80\x95\xa8\x58\x88\x4c\x19\xa2\xec\xa6\xb0\xf5\xef\xc5\x52\x94\x22\x25\x3e\xf5\x94\x88\x5c\xce\xce\xcc\xce\x5a\x66\x26\x2d\x75\x6d\x10\xdd\xe3\xcb\x8f\xaf\x0f\x52\xa6\xbb\x2c\x2a\x0b\xd7\xdc\xdc\xe2\x24\x45\x7f\x9d\x19\x97\xae\xe8\x7b\xe1\x1a\x07\x7d\xd4\x45\xa9\x7f\x95\x06\x69\xb5\xdb\x69\x9b\x39\x7a\x2b\xb4\x6e\x45\x2a\x21\x29\x7a\x9c\xe8\xc5\xfc\x71\x20\x65\x1d\xe1\x0c\x67\x32\x90\x8b\x95\x75\x8b\x38\x26\xd9\xbe\xf5\xf3\x75\xd3\xa6\x03\x56\x5e\xd5\x78\x41\x61\x41\xea\xf4\x1f\xd3\x7c\xbc\xdb\xb4\xb4\x44\x56\x49\x21\x4c\xba\xad\x40\xea\x85\x49\x54\xd6\xe0\x8c\xe7\xda\xec\x41\x4f\xdc\xc4\xf7\xac\xea\x66\xd2\xc9\x86\x3e\xff\x02\x1b\x1d\xb1\x78\x87\x69\x5e\xf7\x55\x7d\xd1\xaf\x6f\xfe\xc6\x41\x23\x3f\xd8\xb4\x29\x2a\x0b\xcd\x5f\xc1\xb7\x91\x6d\xb9\xf5\x52\xa1\x59\xf2\x69\xbe\x88\x54\xd2\x92\x14\x65\x95\xea\xd2\xfb\x10\x5c\xb0\x4c\x57\xdd\x8c\xa4\xdc\x4e\xf9\xe6\x96\xc6\x0e\x44\x84\xeb\xcf\x88\x33\x73\x8c\xed\xa1\x2c\x71\x7d\xdd\xb9\x6a\x83\x2c\x29\xbc\x6e\x1e\xcf\x42\x9d\xb4\x8b\xaf\x94\x75\x51\xdc\xd2\x66\xe5\xb1\xa6\x1a\x07\xe7\xde\x4d\x28\xc8\x55\x73\x92\xc2\x1c\x75\x09\x52\x09\x17\x42\x8a\xa9\x23\x6b\x52\xfc\x77\x4d\x52\xf8\x80\x58\x07\x95\x60\x4d\x6b\x75\xb7\xa6\x25\xa4\x68\x43\x72\xba\x7e\xe8\xc6\x1f\x28\x26\x9e\x54\x32\x70\xea\xc9\xbc\x99\xa4\x12\x5a\xc2\x6d\x8b\xbc\x41\x7f\x9c\xee\xb2\xc9\xf9\xf9\x8c\xa6\x3e\x98\xfe\xda\x35\xba\x39\xb8\xd5\xff\x52\x14\x39\x7a\x57\x87\xb4\x7a\x1b\x9f\x54\xba\xcb\xd6\x6a\xe2\xe3\x12\xcd\xd6\x58\x29\x84\x3a\x8d\xfc\x4b\x77\x19\x6d\x5a\x90\xba\x63\x1f\x4a\x67\xa4\x60\xd8\xc7\x47\x90\xbf\xc3\x66\x33\x3c\x0c\xf3\xfa\x59\xc1\x1d\xd2\x6d\x9f\x88\x05\x7c\x21\xdf\x07\x66\x73\x1e\x6d\xd9\xa3\x30\xad\x8f\x20\xea\x26\xb7\x11\xfb\xda\x55\xdc\xf2\xfb\xbc\x08\x99\x18\xa2\x71\xff\x61\x6d\x17\xbe\xb0\xaa\x59\xf8\x34\x57\x01\x28\x44\x4b\xec\xeb\xc2\x36\x39\x08\x98\x45\xf3\x4f\x0e\x33\xb7\xb6\xd4\x8b\x9a\xb4\xff\x68\x47\x47\xa7\xcb\xda\x40\xe8\xb5\x68\xa0\x3a\x85\x92\xa9\x86\x89\x6e\x4d\xb9\xbf\xb4\x47\x0f\xdb\xea\xb7\x03\xdf\xa2\xb0\x79\x55\xef\xb4\xdf\x25\xa6\x7e\x69\x99\x74\xfd\xcc\x61\xe0\x29\xf4\xc6\xf1\xd1\xc8\x3a\x00\xe8\x95\xb3\x48\x9f\x09\xfe\xc7\x1a\x5c\xa1\xd4\xae\x61\x90\xae\x6c\x14\xaf\x13\xc3\xc4\x33\x56\x16\xf3\x0f\x45\x77\x68\x5d\x3c\xc3\xf4\x1b\x71\xd4\xd2\xf8\xb9\xdf\xef\x0b\xe6\x04\x26\x36\x62\x5d\x61\x7d\x93\x21\x3c\x61\x45\xfc\xf2\xb3\x49\xa3\xcd\xe8\xed\xf2\xae\xc8\xbf\x01\x00\x00\xff\xff\x4c\x2e\xf9\x29\xc7\x05\x00\x00")

func bashenvCmdBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvCmdBash,
		"bashenv/cmd.bash",
	)
}

func bashenvCmdBash() (*asset, error) {
	bytes, err := bashenvCmdBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/cmd.bash", size: 1479, mode: os.FileMode(420), modTime: time.Unix(1652927627, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvFnBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x4d\x6f\xe2\x30\x10\x3d\xdb\xbf\xe2\x69\x64\x09\xd0\x2a\x8a\xe0\xca\x66\x8f\x2b\xed\x6f\x60\x39\x58\x66\x4c\xac\xa6\x93\xc8\x36\xa0\x0a\xf2\xdf\x2b\x43\x5a\x72\xa8\xaa\x1e\x3d\xef\xcd\xfb\x18\x6b\x2f\x95\x8d\xc7\xb4\x5c\xe1\xaa\xd5\x81\x5d\x67\x23\xe3\xc0\xc9\x35\xf4\x4f\xd2\xc0\x2e\xc3\xc2\x9f\xc4\xe5\xd0\xcb\x22\xc1\xc6\xe3\xe9\x95\x25\x27\xd2\xaa\xeb\x9d\xed\xca\xa4\x0b\xc2\x8d\x59\xe6\xb7\x81\x61\xd6\xb8\xe1\x18\x79\xc0\x87\xda\xf4\xac\xce\xa0\xb9\x01\xe1\x86\x96\xed\x01\xd5\x7a\xa5\x15\xbb\xb6\x47\xc5\x20\x73\x9d\x04\xeb\x1a\x35\xfd\x17\x1a\x0b\xd1\x5e\x5e\x50\xfd\x6d\xb0\xa8\x9b\xfa\x3a\xc4\x20\x19\xf4\x9b\xcc\x9a\xfe\xd0\xb8\xc0\x0d\x39\xa2\x70\x41\x20\x3d\xea\xd2\xaa\x58\xfc\xb8\x55\x81\x62\x18\xca\x8b\xca\x42\x21\x92\x56\x7c\xb6\x1d\xe8\x8b\x62\xc9\xcd\xc2\xd3\x16\xf7\xf4\xa6\xcc\x27\xf7\x20\xbe\xff\xc6\x3d\xcd\xec\xe9\xc9\xf1\xd2\x94\x4e\x48\x6d\x7f\x49\xfd\x29\x3a\x6e\xc8\x6c\x68\xba\x0e\x19\x2f\x30\xcb\xe9\xc7\x60\xbc\xac\x3e\x21\x3c\x80\x7b\xb2\x19\xa0\x55\xf0\xd8\xed\x40\xe6\x29\x49\xd8\xef\xb7\xc8\x2d\x8b\x56\xea\xd1\xcc\x4b\x39\xa1\x0d\x1d\x2a\xc1\xaf\x8d\x56\xd3\xb2\x0f\x7a\xd4\xef\x01\x00\x00\xff\xff\x5c\xaf\x12\xe0\x23\x02\x00\x00")

func bashenvFnBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvFnBash,
		"bashenv/fn.bash",
	)
}

func bashenvFnBash() (*asset, error) {
	bytes, err := bashenvFnBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/fn.bash", size: 547, mode: os.FileMode(420), modTime: time.Unix(1652927627, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvPlugnBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5d\x6f\xdc\x36\x16\x7d\x96\x7e\xc5\x0d\xab\xba\x76\x00\xce\x64\xbc\xd8\x97\x7a\xc7\x68\xd0\x04\x69\x80\x20\x0d\xe2\x64\xf7\xc1\x09\x0c\x5a\xa4\x24\xc2\x12\xa9\x90\xd4\x8c\x3f\xff\xfb\xe2\x92\xd2\x48\x1a\x6b\xc6\x6e\xfb\x62\x68\xc8\xcb\xc3\xc3\xfb\x71\x78\xe9\x78\x25\x8c\x95\x5a\x1d\x1e\xc1\x5d\x1c\x71\x91\x96\xcc\x08\xe0\xc2\xa6\x4b\x72\x56\xe8\x35\xb4\xf3\x24\x8e\x44\x5a\x68\x20\x75\xd9\xe4\xea\x57\x48\xee\x3e\x7d\xf8\xfa\xee\xe3\xc5\x7f\xdf\x7e\x3e\x7b\xff\xe7\xc7\x5f\x29\x17\xab\x07\x12\x3f\xc4\xb1\x54\xd6\xb1\xb2\x9c\x02\x7c\x1f\xa6\x80\x81\x12\x6b\x40\x24\xa9\x20\x33\xba\x02\x06\xef\xa4\x83\xaf\x9f\x3f\x90\x7e\x4d\x63\xca\x25\x49\x16\x04\x14\xab\xc4\x92\x24\xc7\x24\x8e\x4a\x9d\xb2\x12\x2e\x99\x15\x99\x2c\x05\x4e\x00\xd7\x6b\x55\x6a\xc6\x85\x01\x66\x72\x0b\xa9\x56\x4e\x28\x67\x21\x5d\xf3\x38\x1a\x9a\x2e\x49\x72\x88\xbf\xfd\x32\x92\x34\xa6\x24\x47\x24\x8e\xea\xc6\x16\x1c\x48\x82\x07\x7a\xff\xf1\xe2\xd3\xeb\x2f\x7f\xcc\xd9\x8a\xc9\x92\x5d\x96\x82\xc0\xc1\xe9\x9c\x8b\xd5\x5c\x35\x65\x19\x47\x32\x83\xf3\x73\x20\xc9\x10\x96\xc0\x72\x09\x2f\x67\x8e\x99\x59\x7e\x0b\xdf\xbf\xc3\xfd\xfd\x6e\x23\x6f\x71\x02\xae\x10\x2a\x8e\xa2\x75\x21\xd3\x02\xd2\xc6\x94\x70\x0a\x9b\x6d\xe0\xf8\xf4\x60\x01\x07\x07\x83\xa3\x2d\x09\x1a\x11\x1c\xc4\x43\x2e\x09\xb5\xe8\xaa\x16\x60\x9d\x0b\xf7\x24\x00\x1a\x0d\x01\x7e\x00\xa5\x15\xbb\xa6\x46\x70\x69\x44\xea\x96\x0b\xa0\x7f\x52\x12\xc7\x51\x7b\x4a\x7a\x0b\x24\xe9\x11\xc8\x90\x78\x9b\x0c\x9f\x4a\xc1\xac\x80\x36\xe4\x20\xa4\x2b\x84\x09\xe7\xd1\x26\xd0\x72\x7a\x33\xbd\x92\x0c\x82\x97\x08\x2c\x4e\x0f\x8e\x3d\xce\xb5\x74\xb0\x88\xa3\x28\x93\x71\x14\x55\x57\x5c\x1a\xa0\x35\x60\xb4\x91\xeb\x37\xb4\x19\xb3\x48\x7c\x94\x43\xf8\xe0\x1e\x01\xe1\xfa\x16\xe8\xef\xe3\x35\x5d\x50\x8f\xb7\x02\x18\xfd\x04\x15\xbb\x12\x60\x1b\x23\x60\x2d\xa0\x51\x8e\x19\x23\x38\x30\xb0\x52\xe5\xa5\x00\x64\x20\x95\xd3\xa0\x1b\x83\xe8\xb9\x70\x71\x14\x75\x59\x75\xc1\xa5\xb1\xcb\xc3\xe4\x30\x93\x8a\xc3\x0c\xd0\x85\x5c\xd4\xae\x80\x05\x50\xa5\x1d\xd0\x9a\xb9\x02\x7e\x99\xfd\x02\xd4\xdd\xd4\x02\xf8\xd1\xd1\x70\x39\xe6\xc3\xce\xf5\x7e\x41\xe6\x17\x74\x89\x76\xf7\xd3\x68\xe7\xf3\xdf\xbe\x3f\x10\xa0\xe2\x07\x2c\x30\xd3\x0e\x0e\xb6\xac\x02\x7e\x6f\xf5\x6a\x14\xb4\xe0\x94\xd9\xfc\xe5\xd0\x27\x1b\x97\x45\xcf\x38\x92\xb8\x16\x29\x54\x2b\xa0\x19\xdc\x3d\xc0\x6c\x36\x87\x6f\x27\xb8\x36\x5d\xf3\x25\x49\x3e\xfd\xef\x0d\xf1\xfb\xe8\x9a\x6f\xb9\x3d\x32\x15\x3a\x96\x24\xe9\x9a\x93\x36\xdc\xa2\xb4\x22\x8e\xa2\x5c\x3a\x48\x4b\xad\xba\x9a\x84\xe4\x38\xf6\xf3\x2d\x4c\x9f\xd7\x28\x2f\x8d\xda\x23\x30\x9f\x45\xa5\x57\x62\xac\x2c\x5d\x25\xb7\xa3\x76\xa0\x30\x61\xc4\x8b\x4c\x1c\x99\x0a\xa8\xc9\xb6\x74\x40\x28\x5c\xca\xe7\x49\x30\xdd\x65\xb6\xd9\xa4\x37\x44\xaa\x35\x67\x4e\x4c\xf1\xfc\xea\x67\x3a\x9e\x4c\x71\xd0\xb5\x93\x5a\xb1\xb2\xbc\x81\x5a\x2a\xac\x9a\x54\x57\x95\x74\x73\xc7\xf2\xf9\xa5\x61\x2a\x2d\xa6\x89\xb7\x76\x4e\xda\xa2\xd5\xc8\xf3\x73\x78\x01\x74\xa7\xa2\x6d\x28\xb6\x09\xd4\x55\xb2\xa7\x72\xd8\x4e\x1e\x01\x06\xbe\xf5\xb4\xe0\xbe\xae\xba\x52\xdd\xab\x97\x3d\xfa\x28\xfe\x1b\x4e\xb3\x5c\xba\x67\xec\x5c\x31\xc5\x72\xc1\xe1\xf2\x06\xfc\x82\x6e\xfb\x57\xb1\xd7\xe0\x17\xe0\x93\x46\xab\x4c\xe6\x40\x69\x5e\xea\x4b\x56\xe2\x87\x70\x14\x95\xc6\xb2\x4c\xcc\x82\xac\x69\x73\x03\xf7\x90\x1b\x51\x03\xfd\xf1\x24\xeb\x4d\xad\x4c\xe3\x33\xce\xb7\xb1\x9f\x4c\x04\x4c\x65\xef\x00\xaf\xa7\x7d\xb4\x48\x5f\xc0\x2f\x20\x39\xc4\x0d\xed\x4d\x75\xa9\x4b\x99\x52\x23\x32\xf8\xe3\xed\xeb\x37\x47\x53\x9e\xaa\xa5\x52\x82\x63\x8a\x24\x87\xff\x81\xd9\x7c\x16\x76\xba\xe8\xa1\x8f\x86\x0e\x0b\x47\x29\x44\x7a\xa5\x1b\x74\xac\x75\xc2\x8c\xab\xca\x5b\xd4\x5e\x0a\x1e\x0d\x6f\x16\xd2\xad\xc9\xf6\x8e\x50\x8f\xce\x34\x72\x61\x26\x5c\x5a\x00\xa5\x8e\xe5\x76\x0b\x60\x0c\x3f\x00\xd9\xb6\x0b\x87\x1f\xed\x72\x3a\x79\xec\xb8\xbf\x96\xb6\x52\x2a\x54\x22\xf7\x95\x36\x70\xdf\x00\x72\xa3\x46\xfb\x11\xc8\x1e\x65\x2a\xa5\x75\x53\xc5\xfe\x41\x5a\x07\x98\x95\xa1\x79\xe9\x65\xc8\x16\xba\x76\x40\x2d\x20\x02\xe6\x58\x1c\x65\xda\x80\x57\x5b\xa9\x60\x47\x62\xbd\x3c\x01\xae\xe3\x28\x1a\xa2\x8d\x3a\x9b\x04\x01\xb0\xb1\x69\x4d\xac\x63\xae\xb1\x68\x82\x01\x13\xb0\x4f\xe0\x86\xf9\xd6\x4e\x61\x3b\xe3\x7f\x73\x69\xfd\xc0\x00\xba\x6d\x0e\x11\x3b\x65\x2e\xec\x3c\x0f\x48\x33\xa7\xab\x12\xef\x67\x5d\x95\x58\x97\xa1\x73\x44\x61\x20\x5d\x4b\x39\x00\x0a\x9e\xfa\x4b\x28\xb8\xc4\x48\x2f\x9b\x01\xa9\x36\x52\xb9\x0c\x08\xc0\xcf\xf4\xf8\x95\x85\x9f\xe9\xbf\xf1\xcf\x02\x3f\xed\x37\x5c\xb2\xd1\x26\x92\x74\x1c\x80\x24\xc1\x3f\xf8\x85\x90\xa8\xb2\x5a\x89\x4d\x74\x9a\x3e\x3a\x0f\x71\xec\x8c\xcc\x73\x61\xa6\xc2\xfc\x25\x4c\x59\x28\xb4\xbe\xc2\xf8\x75\xfe\x7b\x7c\xef\xa0\x85\x17\xef\x13\xb0\x85\xcc\xdc\xee\x54\x08\x41\xd9\x4e\x86\x2e\x68\x5d\x2a\xb4\xb5\x78\xbd\x39\xe1\x3c\xc1\x2d\xb6\x3a\xb6\x15\x2b\x01\x5d\xec\x55\x8d\x8a\xeb\x5a\x1b\x07\xa3\xbc\x09\xb9\xee\x9d\x19\x8d\x90\x80\x24\xbf\x75\xb7\xf6\x2e\xef\x44\xad\x6f\x68\xce\x9c\x58\xb3\x1b\x18\xac\x7c\x88\xe3\xc0\x79\xca\x71\x6f\xfd\x0c\x30\xd8\x28\xe6\xe4\xfd\x3c\xe8\x0d\x27\x7c\x81\x6f\x03\x05\x34\xb3\x4f\x5f\x4c\x4f\xde\xf0\x02\x5b\xcd\xee\x18\xc8\xbd\xcd\xfc\x29\xf2\x6f\xc2\xd4\x3f\x67\x6f\xaa\xbf\x41\xac\x8d\x65\x2e\x26\x85\xe7\x9d\x70\x5d\x06\x05\xc3\xc6\x30\x17\xde\x72\x53\x8d\xc4\xe0\x99\x85\x65\x38\x66\x13\x00\x7c\x39\x92\x51\x3d\x0e\xdc\xea\xdf\x39\x03\x5a\x21\xc5\x26\x43\x1e\x92\xef\xf9\xe4\x9e\x4b\xa9\xcd\x6a\x32\x6c\xc3\x5a\x36\x76\xda\x49\x67\x7f\xd3\x49\xb0\x62\x65\x83\x9f\xff\xea\x9e\xc6\xfe\x2e\xf4\xa3\x1b\x3a\x56\xec\x25\x3d\xe9\x3c\xa9\xe4\x24\xd1\xf7\x4a\x3a\xc9\x4a\x79\x2b\x80\x29\x10\x55\xed\x6e\x3a\xe2\x28\x98\x3b\x73\x8c\xc4\x91\xd3\x4d\x5a\xec\x21\xf2\x8c\xf4\xdc\x61\xd0\xbf\x93\xbb\xff\x0f\xf4\x34\x79\x4b\x12\xef\x52\x35\xa4\xba\xad\x67\xfe\xd8\x17\x56\x37\x26\x9d\xac\xb1\x33\x3f\xe3\x1b\x5d\xa6\xb8\x05\x54\x46\x6f\xbd\xd5\xd6\xff\x13\x11\x05\x88\x7c\x8f\x96\x0d\x34\xf4\xb1\x34\xce\xfa\xb6\x2d\x9c\x36\x90\x86\x27\x96\xec\xbd\x52\x2a\x26\xdb\xff\xbe\x60\xb6\x50\xa1\xa1\x96\xb5\xc8\x98\x2c\x4f\xc2\xe3\xee\xcb\xe7\xd7\xbf\xbf\xed\xb6\xf5\x36\xd7\x71\x1c\xa5\x15\xef\xb2\xbd\xbd\xcb\x46\x63\x6d\xeb\x3e\x1a\xdb\x3c\x9d\xc6\xa3\xbe\xb3\x19\x0d\x61\x27\x33\x1a\x68\xa5\x7d\x34\x16\xfc\x37\x1a\x6a\x75\x72\x34\xd6\xc6\xb5\x73\x15\x19\x4e\x52\x65\xbb\x26\xbb\xeb\xb8\xb6\x6b\x70\x80\xd4\x8b\xdd\xd4\x70\xf8\x35\x35\x63\xb7\x16\x60\x81\xb5\x0e\x54\x16\x08\xe9\xae\xa8\xff\x07\x00\x00\xff\xff\x07\x29\x11\xba\x0b\x13\x00\x00")

func bashenvPlugnBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvPlugnBash,
		"bashenv/plugn.bash",
	)
}

func bashenvPlugnBash() (*asset, error) {
	bytes, err := bashenvPlugnBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/plugn.bash", size: 4875, mode: os.FileMode(420), modTime: time.Unix(1652932548, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bashenv/bash.bash":  bashenvBashBash,
	"bashenv/cmd.bash":   bashenvCmdBash,
	"bashenv/fn.bash":    bashenvFnBash,
	"bashenv/plugn.bash": bashenvPlugnBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bashenv": &bintree{nil, map[string]*bintree{
		"bash.bash":  &bintree{bashenvBashBash, map[string]*bintree{}},
		"cmd.bash":   &bintree{bashenvCmdBash, map[string]*bintree{}},
		"fn.bash":    &bintree{bashenvFnBash, map[string]*bintree{}},
		"plugn.bash": &bintree{bashenvPlugnBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
