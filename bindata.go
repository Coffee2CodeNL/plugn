// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// bashenv/bash.bash
// bashenv/cmd.bash
// bashenv/fn.bash
// bashenv/plugn.bash
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bashenvBashBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x51\x8b\x13\x31\x14\x85\x9f\x3b\xbf\xe2\x6c\x58\x18\x05\x77\x07\x64\x9f\x2a\x2d\xb4\xa8\xd4\x97\x8e\x58\x11\xa5\x14\xb9\xcd\xdc\x69\x82\x99\x44\x72\x13\x6a\xff\xbd\x64\xb4\x32\x56\x9f\x02\xc9\x3d\xdf\x39\x39\xb7\xb2\x3d\xf6\x7b\xa8\xfb\xf5\x6a\xb7\xf9\xfa\xe9\xcd\x87\xdd\xbb\xed\xdb\x56\xe1\xc1\x25\xa8\x27\x85\xc3\xe1\x15\x92\x61\x5f\xcd\x58\x9b\x00\x75\x77\x87\x2f\x21\x47\xc8\x45\x12\x0f\x58\x93\x18\x58\x41\xc8\x09\xa1\x47\x47\x89\xe7\x98\xb0\xda\xad\x9a\x28\xdf\x3b\x26\x61\xe4\xef\xa7\x48\x1d\x23\x85\x5f\xfa\x27\x84\x88\x53\x64\x4a\x1c\x1f\x55\x35\xbb\x46\x7a\x96\x3d\x0d\xfc\x5c\x61\xb1\x80\x7a\x4d\xf1\x6c\xfd\x34\xd0\xc8\xfd\x7d\x40\xb5\x1e\xed\x0e\x9f\x5f\x20\x0b\x63\x13\x06\x3e\x46\x3e\x17\x0b\xeb\x25\x91\x73\x70\x94\x58\xd2\xe8\x38\x57\x57\x59\x0d\xe0\x1e\xe3\xe8\x75\xee\x48\x62\xea\x5b\xfa\x47\xc3\x1e\xd4\x75\xb0\xa9\x30\x1b\x4e\xba\x11\xc3\xce\x09\xc8\x77\xd0\x86\xfc\x89\x71\x29\xcd\x64\xe1\x58\x0b\xc6\xd7\x5b\x23\xc9\x5d\x80\x18\x3c\x68\xa8\xf1\xba\xc9\x12\x1b\x17\x34\xb9\xe6\x68\x7d\x53\xbc\xb1\x5c\x4e\xf9\xaa\xfe\x1b\xa1\x4d\xd1\xcb\xff\x94\xff\xa4\x5e\xc1\x97\x0e\x38\x0e\xd6\x93\x83\xb0\x88\x0d\xbe\xec\xab\x34\x08\xcf\x9a\x45\x28\x5e\xca\x97\x12\x7d\x63\x70\xdf\xb3\x4e\x8f\xea\x0f\xa8\xb7\xd5\x8c\x7f\xd8\x84\x97\x55\x6f\xab\x9f\x01\x00\x00\xff\xff\xbe\x15\xe5\x0d\x2d\x02\x00\x00")

func bashenvBashBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvBashBash,
		"bashenv/bash.bash",
	)
}

func bashenvBashBash() (*asset, error) {
	bytes, err := bashenvBashBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/bash.bash", size: 557, mode: os.FileMode(420), modTime: time.Unix(1652927627, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvCmdBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x6e\xdb\x3a\x10\x3c\x93\x5f\x31\x6f\x43\x07\xc9\x41\xd0\x93\x4f\x85\x0d\x17\x09\xda\xde\xda\x5e\x72\x8c\x1d\x80\x95\xa8\x58\x88\x4c\x19\xa2\xec\xa6\xb0\xf5\xef\xc5\x52\x94\x22\x25\x3e\xf5\x94\x88\x5c\xce\xce\xcc\xce\x5a\x66\x26\x2d\x75\x6d\x10\xdd\xe3\xcb\x8f\xaf\x0f\x52\xa6\xbb\x2c\x2a\x0b\xd7\xdc\xdc\xe2\x24\x45\x7f\x9d\x19\x97\xae\xe8\x7b\xe1\x1a\x07\x7d\xd4\x45\xa9\x7f\x95\x06\x69\xb5\xdb\x69\x9b\x39\x7a\x2b\xb4\x6e\x45\x2a\x21\x29\x7a\x9c\xe8\xc5\xfc\x71\x20\x65\x1d\xe1\x0c\x67\x32\x90\x8b\x95\x75\x8b\x38\x26\xd9\xbe\xf5\xf3\x75\xd3\xa6\x03\x56\x5e\xd5\x78\x41\x61\x41\xea\xf4\x1f\xd3\x7c\xbc\xdb\xb4\xb4\x44\x56\x49\x21\x4c\xba\xad\x40\xea\x85\x49\x54\xd6\xe0\x8c\xe7\xda\xec\x41\x4f\xdc\xc4\xf7\xac\xea\x66\xd2\xc9\x86\x3e\xff\x02\x1b\x1d\xb1\x78\x87\x69\x5e\xf7\x55\x7d\xd1\xaf\x6f\xfe\xc6\x41\x23\x3f\xd8\xb4\x29\x2a\x0b\xcd\x5f\xc1\xb7\x91\x6d\xb9\xf5\x52\xa1\x59\xf2\x69\xbe\x88\x54\xd2\x92\x14\x65\x95\xea\xd2\xfb\x10\x5c\xb0\x4c\x57\xdd\x8c\xa4\xdc\x4e\xf9\xe6\x96\xc6\x0e\x44\x84\xeb\xcf\x88\x33\x73\x8c\xed\xa1\x2c\x71\x7d\xdd\xb9\x6a\x83\x2c\x29\xbc\x6e\x1e\xcf\x42\x9d\xb4\x8b\xaf\x94\x75\x51\xdc\xd2\x66\xe5\xb1\xa6\x1a\x07\xe7\xde\x4d\x28\xc8\x55\x73\x92\xc2\x1c\x75\x09\x52\x09\x17\x42\x8a\xa9\x23\x6b\x52\xfc\x77\x4d\x52\xf8\x80\x58\x07\x95\x60\x4d\x6b\x75\xb7\xa6\x25\xa4\x68\x43\x72\xba\x7e\xe8\xc6\x1f\x28\x26\x9e\x54\x32\x70\xea\xc9\xbc\x99\xa4\x12\x5a\xc2\x6d\x8b\xbc\x41\x7f\x9c\xee\xb2\xc9\xf9\xf9\x8c\xa6\x3e\x98\xfe\xda\x35\xba\x39\xb8\xd5\xff\x52\x14\x39\x7a\x57\x87\xb4\x7a\x1b\x9f\x54\xba\xcb\xd6\x6a\xe2\xe3\x12\xcd\xd6\x58\x29\x84\x3a\x8d\xfc\x4b\x77\x19\x6d\x5a\x90\xba\x63\x1f\x4a\x67\xa4\x60\xd8\xc7\x47\x90\xbf\xc3\x66\x33\x3c\x0c\xf3\xfa\x59\xc1\x1d\xd2\x6d\x9f\x88\x05\x7c\x21\xdf\x07\x66\x73\x1e\x6d\xd9\xa3\x30\xad\x8f\x20\xea\x26\xb7\x11\xfb\xda\x55\xdc\xf2\xfb\xbc\x08\x99\x18\xa2\x71\xff\x61\x6d\x17\xbe\xb0\xaa\x59\xf8\x34\x57\x01\x28\x44\x4b\xec\xeb\xc2\x36\x39\x08\x98\x45\xf3\x4f\x0e\x33\xb7\xb6\xd4\x8b\x9a\xb4\xff\x68\x47\x47\xa7\xcb\xda\x40\xe8\xb5\x68\xa0\x3a\x85\x92\xa9\x86\x89\x6e\x4d\xb9\xbf\xb4\x47\x0f\xdb\xea\xb7\x03\xdf\xa2\xb0\x79\x55\xef\xb4\xdf\x25\xa6\x7e\x69\x99\x74\xfd\xcc\x61\xe0\x29\xf4\xc6\xf1\xd1\xc8\x3a\x00\xe8\x95\xb3\x48\x9f\x09\xfe\xc7\x1a\x5c\xa1\xd4\xae\x61\x90\xae\x6c\x14\xaf\x13\xc3\xc4\x33\x56\x16\xf3\x0f\x45\x77\x68\x5d\x3c\xc3\xf4\x1b\x71\xd4\xd2\xf8\xb9\xdf\xef\x0b\xe6\x04\x26\x36\x62\x5d\x61\x7d\x93\x21\x3c\x61\x45\xfc\xf2\xb3\x49\xa3\xcd\xe8\xed\xf2\xae\xc8\xbf\x01\x00\x00\xff\xff\x4c\x2e\xf9\x29\xc7\x05\x00\x00")

func bashenvCmdBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvCmdBash,
		"bashenv/cmd.bash",
	)
}

func bashenvCmdBash() (*asset, error) {
	bytes, err := bashenvCmdBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/cmd.bash", size: 1479, mode: os.FileMode(420), modTime: time.Unix(1652927627, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvFnBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x4d\x6f\xe2\x30\x10\x3d\xdb\xbf\xe2\x69\x64\x09\xd0\x2a\x8a\xe0\xca\x66\x8f\x2b\xed\x6f\x60\x39\x58\x66\x4c\xac\xa6\x93\xc8\x36\xa0\x0a\xf2\xdf\x2b\x43\x5a\x72\xa8\xaa\x1e\x3d\xef\xcd\xfb\x18\x6b\x2f\x95\x8d\xc7\xb4\x5c\xe1\xaa\xd5\x81\x5d\x67\x23\xe3\xc0\xc9\x35\xf4\x4f\xd2\xc0\x2e\xc3\xc2\x9f\xc4\xe5\xd0\xcb\x22\xc1\xc6\xe3\xe9\x95\x25\x27\xd2\xaa\xeb\x9d\xed\xca\xa4\x0b\xc2\x8d\x59\xe6\xb7\x81\x61\xd6\xb8\xe1\x18\x79\xc0\x87\xda\xf4\xac\xce\xa0\xb9\x01\xe1\x86\x96\xed\x01\xd5\x7a\xa5\x15\xbb\xb6\x47\xc5\x20\x73\x9d\x04\xeb\x1a\x35\xfd\x17\x1a\x0b\xd1\x5e\x5e\x50\xfd\x6d\xb0\xa8\x9b\xfa\x3a\xc4\x20\x19\xf4\x9b\xcc\x9a\xfe\xd0\xb8\xc0\x0d\x39\xa2\x70\x41\x20\x3d\xea\xd2\xaa\x58\xfc\xb8\x55\x81\x62\x18\xca\x8b\xca\x42\x21\x92\x56\x7c\xb6\x1d\xe8\x8b\x62\xc9\xcd\xc2\xd3\x16\xf7\xf4\xa6\xcc\x27\xf7\x20\xbe\xff\xc6\x3d\xcd\xec\xe9\xc9\xf1\xd2\x94\x4e\x48\x6d\x7f\x49\xfd\x29\x3a\x6e\xc8\x6c\x68\xba\x0e\x19\x2f\x30\xcb\xe9\xc7\x60\xbc\xac\x3e\x21\x3c\x80\x7b\xb2\x19\xa0\x55\xf0\xd8\xed\x40\xe6\x29\x49\xd8\xef\xb7\xc8\x2d\x8b\x56\xea\xd1\xcc\x4b\x39\xa1\x0d\x1d\x2a\xc1\xaf\x8d\x56\xd3\xb2\x0f\x7a\xd4\xef\x01\x00\x00\xff\xff\x5c\xaf\x12\xe0\x23\x02\x00\x00")

func bashenvFnBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvFnBash,
		"bashenv/fn.bash",
	)
}

func bashenvFnBash() (*asset, error) {
	bytes, err := bashenvFnBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/fn.bash", size: 547, mode: os.FileMode(420), modTime: time.Unix(1652927627, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvPlugnBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5b\x6f\xdb\xb8\x12\x7e\x96\x7e\xc5\x2c\x57\x9b\x4d\x0a\xc8\xae\x73\x70\x5e\x36\xc7\xc1\x16\xdb\xa0\x1b\xa0\x68\x83\xa4\x3d\xe7\x21\x2d\x02\x46\xa2\x24\x22\x12\xa9\x92\x94\x9d\x4b\xf3\xdf\x0f\x86\xa4\x6e\x8e\xec\x64\xdb\x97\xc0\xe2\xcc\x7c\xfc\x38\x37\x0e\x13\xae\x98\xd2\x5c\x8a\xfd\x03\x78\x08\x83\x94\x25\x25\x55\x0c\x52\xa6\x93\x25\xb9\x28\xe4\x1a\xbc\x9c\x84\x01\x4b\x0a\x09\xa4\x2e\x9b\x5c\xfc\x01\xd1\xc3\xd9\xfb\xcf\xef\x3e\x5c\xfd\xf7\xe4\xfc\xe2\xf4\xe3\x87\x3f\xe2\x94\xad\x1e\x49\xf8\x18\x86\x5c\x68\x43\xcb\x72\x0a\xf0\xd4\x89\x80\x82\x60\x6b\x40\x24\x2e\x20\x53\xb2\x02\x0a\xef\xb8\x81\xcf\xe7\xef\x49\x6f\xd3\xa8\x72\x49\xa2\x05\x01\x41\x2b\xb6\x24\xd1\x21\x09\x83\x52\x26\xb4\x84\x6b\xaa\x59\xc6\x4b\x86\x02\x48\xe5\x5a\x94\x92\xa6\x4c\x01\x55\xb9\x86\x44\x0a\xc3\x84\xd1\x90\xac\xd3\x30\x18\xaa\x2e\x49\xb4\x8f\xdf\xd6\x8c\x44\x8d\x2a\xc9\x01\x09\x83\xba\xd1\x45\x0a\x24\xc2\x03\x9d\x7e\xb8\x3a\x7b\xf3\xe9\xef\x39\x5d\x51\x5e\xd2\xeb\x92\x11\xd8\x3b\x9e\xa7\x6c\x35\x17\x4d\x59\x86\x01\xcf\xe0\xf2\x12\x48\x34\x84\x25\xb0\x5c\xc2\xab\x99\xa1\x6a\x96\xdf\xc3\xd7\xaf\xf0\xfd\xfb\x76\x25\xab\x71\x04\xa6\x60\x22\x0c\x82\x75\xc1\x93\x02\x92\x46\x95\x70\x0c\xdd\x36\x70\x78\xbc\xb7\x80\xbd\xbd\xc1\xd1\x96\x04\x95\x08\x2e\xe2\x21\x97\x24\xd6\xe8\x2a\x0f\xb0\xce\x99\x79\x16\x00\x95\x86\x00\xdf\x20\x8e\x2b\x7a\x1b\x2b\x96\x72\xc5\x12\xb3\x5c\x40\xfc\x31\x26\x61\x18\xf8\x53\xc6\xf7\x40\xa2\x1e\x81\x0c\x89\xfb\x64\x38\x2b\x19\xd5\x0c\x7c\xc8\x81\x71\x53\x30\xe5\xce\x23\x95\xa3\x65\x64\x27\x5e\x71\x0a\xce\x4b\x04\x16\xc7\x7b\x87\x16\xe7\x96\x1b\x58\x84\x41\x90\xf1\x30\x08\xaa\x9b\x94\x2b\x88\x6b\xc0\x68\x23\xd7\x2f\xa8\x33\x66\x11\xd9\x28\xbb\xf0\xc1\x77\x04\x84\xdb\x7b\x88\xff\x1a\xdb\xb4\x41\x3d\xdc\x08\x60\xf0\x2b\x54\xf4\x86\x81\x6e\x14\x83\x35\x83\x46\x18\xaa\x14\x4b\x81\x82\xe6\x22\x2f\x19\x20\x03\x2e\x8c\x04\xd9\x28\x44\xcf\x99\x09\x83\xa0\xcd\xaa\xab\x94\x2b\xbd\xdc\x8f\xf6\x33\x2e\x52\x98\x01\xba\x30\x65\xb5\x29\x60\x01\xb1\x90\x06\xe2\x9a\x9a\x02\x7e\x9f\xfd\x0e\xb1\xb9\xab\x19\xa4\x07\x07\x43\x73\xcc\x87\xad\xf6\xd6\x20\xb3\x06\x6d\xa2\x3d\xfc\x3a\xda\xf9\xf2\xcf\xaf\x8f\x04\x62\xf6\x0d\x16\x98\x69\x7b\x7b\x1b\x5a\x0e\xbf\xd7\x7a\x3d\x0a\x9a\x73\xca\x6c\xfe\x6a\xe8\x93\xce\x65\xc1\x0b\x8e\xc4\x6e\x59\x02\xd5\x0a\xe2\x0c\x1e\x1e\x61\x36\x9b\xc3\x97\x23\xb4\x4d\xd6\xe9\x92\x44\x67\xff\x7b\x4b\xec\x3e\xb2\x4e\x37\xdc\x1e\xa8\x0a\x1d\x4b\xa2\x64\x9d\x12\x1f\x6e\x56\x6a\x16\x06\x41\xce\x0d\x24\xa5\x14\x6d\x4d\x42\x74\x18\x5a\xb9\x87\xe9\xf3\x1a\xdb\x4b\x23\x76\x34\x98\x73\x56\xc9\x15\x1b\x77\x96\xb6\x92\xfd\xaa\x1e\x74\x18\xb7\x62\x9b\x4c\x18\xa8\x0a\x62\x95\x6d\xf4\x01\x26\xd0\x34\x9d\x47\x4e\x75\x9b\x5a\xb7\x49\xaf\x88\x54\xeb\x94\x1a\x36\xc5\xf3\xb3\x95\xb4\x3c\xa9\x48\x41\xd6\x86\x4b\x41\xcb\xf2\x0e\x6a\x2e\xb0\x6a\x12\x59\x55\xdc\xcc\x0d\xcd\xe7\xd7\x8a\x8a\xa4\x98\x26\xee\xf5\x0c\xd7\x85\xef\x91\x97\x97\xf0\x0b\xc4\x5b\x3b\x5a\x47\xd1\x27\x50\x5b\xc9\x96\xca\xbe\x17\x1e\x00\x06\xde\x7b\x9a\xa5\xb6\xae\xda\x52\xdd\xd9\x2f\x7b\xf4\x51\xfc\x3b\x4e\xb3\x9c\x9b\x17\xec\x5c\x51\x41\x73\x96\xc2\xf5\x1d\x58\x83\x76\xfb\xd7\x16\xca\x76\xa6\xfe\xdc\xa4\x2f\x85\x5f\x20\xda\xc7\x7c\xd2\x77\xd5\xb5\x2c\x79\x12\x2b\x96\xc1\xdf\x27\x6f\xde\x1e\x4c\xed\x59\x73\x21\x58\x8a\xce\x8e\xf6\xff\x03\xb3\xf9\xcc\x51\xb8\xea\xa1\x0f\x46\x5b\xdb\x4c\x2d\x58\x72\x23\x1b\xa4\xa8\x0d\x53\xe3\xfc\xb4\x1a\xb5\x2d\xaa\x27\xcb\x9d\x61\xbc\x21\xf4\xdd\x56\x3c\x39\x53\x57\xb8\x68\x9e\x31\x93\x14\x10\xc7\x86\xe6\x7a\x03\x60\x0c\x3f\x00\xd9\xd4\x73\x87\x1f\xed\x72\x3c\x79\xec\xb0\x6f\xf0\x1b\xc1\x71\x39\x9d\xda\x9c\x1d\xb8\x6f\x00\xd9\xd5\xf5\x6e\x04\xb2\xa3\xc6\x4b\xae\xcd\x54\xd9\xbc\xe7\xda\x00\xde\x24\x6e\x0c\xe8\x0b\x5a\x17\xb2\x36\x10\x6b\x40\x84\xbc\x94\xd7\x61\x90\x49\x05\xb6\x6f\x71\x01\x5b\x52\xf5\xd5\x11\xa4\x32\x0c\x82\x21\xda\x68\x46\x88\x10\x00\x47\x04\xaf\xa2\x0d\x35\x8d\x46\x15\x0c\x18\x83\x5d\xad\x62\x98\x6f\x5e\x84\x83\x81\xfd\x4e\xb9\xb6\x0b\x03\x68\x3f\x66\x21\x76\x42\x8d\xdb\x79\xee\x90\x66\x46\x56\x25\xde\x74\xb2\x2a\x63\xbc\x52\x49\x5b\x62\xa4\x1d\xce\x06\x40\xce\x53\xff\x08\x05\x4d\x14\xb7\x0d\xc8\x21\xd5\x8a\x0b\x93\x01\x01\xf8\x2d\x3e\x7c\xad\xe1\xb7\xf8\xdf\xf8\x67\x81\x3f\xf5\x17\x34\xe9\xaa\x9c\x44\x2d\x07\x20\x91\xf3\x0f\xfe\x42\x48\xec\x57\x52\xb0\x2e\x3a\x4d\x1f\x9d\xc7\x30\x34\x8a\xe7\x39\x53\x53\x61\xfe\xe4\x44\x1a\x0a\x29\x6f\x30\x7e\xad\xff\x9e\x76\x70\xd4\xb0\x6d\xf0\x08\x74\xc1\x33\xb3\x3d\x15\x5c\x50\x36\x93\xa1\x0d\x5a\x9b\x0a\xbe\x16\x6f\xbb\x13\xce\x23\xdc\x62\x63\xf6\x59\xd1\x12\xd0\xc5\x52\x64\x3c\x8f\xd9\x6d\x2d\x95\x81\x51\xde\xb8\x5c\xb7\xce\x0c\x46\x48\x40\xa2\x3f\xdb\xfb\x6f\x9b\x77\x02\xef\x9b\x38\xa7\x86\xad\xe9\x1d\x0c\x2c\x1f\xc3\xd0\x71\x9e\x72\xdc\x89\x95\x00\x85\xee\xb6\x9a\xbc\xe9\x06\x53\xd6\x84\x2f\x70\xca\x16\x10\x67\xfa\xf9\x16\xff\xec\x5d\xc9\x70\x68\x6b\x8f\x81\xdc\x7d\xe6\x4f\x91\x7f\xeb\x44\x3f\xcf\x5e\x55\x3f\x40\xcc\xc7\x32\x67\x93\x8d\xe7\x1d\x33\x6d\x06\x39\xc5\x46\x51\xe3\x5e\x45\x53\x57\xf2\xe0\xc1\x82\x65\x38\x66\xe3\x00\x6c\x39\x92\x51\x3d\x0e\xdc\x6a\x5f\x0c\x03\x5a\x2e\xc5\x26\x43\xee\x92\xef\xe5\xe4\x5e\x4a\xc9\x67\x35\x19\x0e\x34\x9e\x8d\x9e\x76\xd2\xc5\x0f\x3a\x09\x56\xb4\x6c\xf0\xe7\xbf\xda\x47\xa6\xbd\x0b\xed\x6a\x47\x47\xb3\x9d\xa4\x27\x9d\xc7\x05\x9f\x24\x7a\x2a\xb8\xe1\xb4\xe4\xf7\x0c\xa8\x00\x56\xd5\xe6\xae\x25\x8e\x0d\x73\x6b\x8e\x91\x30\x30\xb2\x49\x8a\x1d\x44\x5e\x90\x9e\x5b\x14\xfa\x17\x67\xfb\xd2\xee\x69\xa6\x9e\x24\xde\xa5\x62\x48\x75\xb3\x9f\xd9\x63\x5f\x69\xd9\xa8\x64\xb2\xc6\x2e\xac\xc4\x8e\x8c\x54\xa4\x1a\xb0\x33\x5a\xed\x8d\x01\xf9\x67\x9a\x28\x40\x60\x67\xb4\x6c\xd0\x43\x9f\xb6\xc6\x59\x3f\xb6\xb9\xd3\x3a\xd2\xf0\x8c\xc9\xce\x2b\xa5\xa2\xdc\xff\x1f\x03\xb3\x25\x66\x12\x6a\x5e\xb3\x8c\xf2\xf2\xc8\x3d\x93\x3e\x9d\xbf\xf9\xeb\xa4\xdd\xd6\xea\xdc\x86\x61\x90\x54\x69\x9b\xed\xfe\x2e\x1b\xad\xf9\x21\x78\xb4\xd6\x3d\x42\xc6\xab\x76\xb2\x19\x2d\xe1\x24\x33\x5a\xf0\xad\x7d\xb4\xe6\xfc\x37\x5a\xf2\x7d\x72\xb4\xe6\xe3\xda\xba\x8a\x0c\x85\xb1\xd0\xbe\xe8\xba\x89\x6b\xb3\x06\x07\x48\x7d\xb3\x9b\x5a\x76\x5f\x53\x12\xbd\x61\x80\x05\xe6\x1d\x28\x34\x10\xd2\x5e\x51\xff\x0f\x00\x00\xff\xff\x1e\x69\xcf\xf9\x55\x12\x00\x00")

func bashenvPlugnBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvPlugnBash,
		"bashenv/plugn.bash",
	)
}

func bashenvPlugnBash() (*asset, error) {
	bytes, err := bashenvPlugnBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/plugn.bash", size: 4693, mode: os.FileMode(420), modTime: time.Unix(1652930331, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bashenv/bash.bash":  bashenvBashBash,
	"bashenv/cmd.bash":   bashenvCmdBash,
	"bashenv/fn.bash":    bashenvFnBash,
	"bashenv/plugn.bash": bashenvPlugnBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bashenv": &bintree{nil, map[string]*bintree{
		"bash.bash":  &bintree{bashenvBashBash, map[string]*bintree{}},
		"cmd.bash":   &bintree{bashenvCmdBash, map[string]*bintree{}},
		"fn.bash":    &bintree{bashenvFnBash, map[string]*bintree{}},
		"plugn.bash": &bintree{bashenvPlugnBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
