// Code generated by go-bindata.
// sources:
// bashenv/bash.bash
// bashenv/cmd.bash
// bashenv/fn.bash
// bashenv/plugn.bash
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bashenvBashBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\x5f\x6b\xdb\x30\x14\xc5\x9f\x97\x4f\x71\x22\x02\xde\x60\x89\x61\xe4\x29\x23\x81\x84\x6d\x64\x2f\xf1\x58\xc6\x68\x09\xa1\x28\xf2\x75\x2c\x2a\x4b\x45\x57\x26\xcd\xb7\xaf\xe4\x36\xc5\x4d\xfb\x64\xa3\x7b\xce\xef\xdc\x3f\x03\x5d\x61\xb7\x83\x18\xad\x96\xdb\xf5\xdd\xff\x9f\x7f\xb7\xbf\x37\xbf\x0a\x81\xb1\x09\x10\x53\x81\xfd\xfe\x3b\x42\x4d\x76\xf0\x89\x54\xed\x20\x86\x43\xdc\xba\xd6\x83\xcf\x1c\xa8\xc1\x4a\x72\x0d\xcd\x70\x6d\x80\xab\x50\xca\x40\x33\xf4\x58\xc5\x46\xf4\x9c\x7f\x0c\x49\x26\xb4\x0f\x47\x2f\x4b\x42\x70\xcf\xfe\x29\x9c\xc7\xd1\x53\x34\xfb\x49\xd4\x5f\x5a\xfa\xdc\x5a\xd9\xd0\x17\x81\xf9\x1c\xe2\x87\xf4\x27\x6d\xfb\x0d\x75\xdc\x97\x0f\x44\x61\x51\x6c\x71\xf3\x15\x6d\x4c\x58\xbb\x86\x0e\x9e\x4e\x29\x42\x5b\x0e\xd2\x18\x98\x88\xe7\xd0\x25\xce\xc4\xc5\x96\x01\x18\xa1\x93\x5e\x74\x87\x28\xc8\xae\xe9\xff\x62\x22\x64\x59\x42\x87\xc4\xcc\x29\xa8\x9c\x6b\x32\x86\x21\x6d\x09\x55\x4b\x7b\x24\x9c\xd3\x66\x62\xbe\xcf\x18\x5d\xf5\x3a\x88\xdb\xd2\xc5\x0a\xc6\x0a\xa2\x7b\xce\x5b\xf6\xb9\x71\x4a\x9a\xfc\xa0\x6d\x9e\xb2\xb1\x58\xf4\xf9\x22\x7b\x8b\x50\x75\xf2\xf3\x47\xce\x77\x5d\x2f\x61\xd3\x0e\xc8\x37\xda\x4a\x03\x26\x66\xed\x6c\xba\x57\xda\x60\x2c\xaa\xf8\x22\xfd\x39\x8d\x14\xe4\x3d\x81\xaa\x8a\x54\x98\x88\x57\x50\xa5\xe3\xf9\x1e\xe3\xd0\xdf\x06\xf1\xf7\x29\x00\x00\xff\xff\xbe\x15\xe5\x0d\x2d\x02\x00\x00")

func bashenvBashBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvBashBash,
		"bashenv/bash.bash",
	)
}

func bashenvBashBash() (*asset, error) {
	bytes, err := bashenvBashBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/bash.bash", size: 557, mode: os.FileMode(420), modTime: time.Unix(1450380776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvCmdBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x41\x73\x9b\x3c\x10\x3d\xc3\xaf\xd8\x4f\x51\x32\xc9\x81\xe1\xc3\xa7\x0e\x1e\x77\x9c\x69\x7b\x6b\x7b\xc9\xd1\x38\x33\x2a\x88\xc0\x58\x16\x1e\x84\xdd\x74\x30\xff\xbd\xbb\x42\x60\x88\x7d\x6a\x2e\x46\xbb\xab\xdd\xf7\x9e\xde\xc6\xcf\x64\xaa\x44\x2d\x21\x78\x86\x2f\x3f\xbe\xbe\xf8\x7e\xba\xcf\x02\x55\x9a\xe6\xf1\x09\x5a\xdf\x1b\xd2\x99\x34\xe9\x8a\x7d\xc7\xb8\x01\x71\x12\xa5\x12\xbf\x94\x84\xb4\xda\xef\x85\xce\x0c\xbb\x14\x6a\xb3\x62\x3c\xc2\xc0\xd0\x27\xd8\xc9\x3f\x06\x18\xd7\x86\xc1\x19\x8c\xcc\x80\x99\x10\x4f\x71\x18\x32\xbf\xbb\xcc\xb3\x75\xf3\xa1\x63\xaf\xbc\xaa\x61\x07\xa5\xc6\x36\xed\x7f\x04\x73\xb3\xde\x76\x6c\x09\x59\xe5\x7b\x9e\x4c\x8b\x0a\x13\x3b\x02\x51\x69\x89\x43\xde\x6a\x79\x00\xf6\x4a\x43\xec\xcc\xaa\x6e\x66\x93\xb4\x9b\xf3\x2f\x6d\x83\x13\xc4\x1f\x7a\xca\xf7\x03\x9e\x6e\xe9\xf5\xcd\x66\x50\x31\xc8\x8f\x3a\x6d\xca\x4a\x83\xa0\x93\xd3\x6d\x22\x5b\xae\x2d\x55\x4c\xe3\x6f\xbb\x88\x03\x1e\x75\x98\x56\x55\x2a\x94\xd5\xc1\xa9\xa0\x09\x2e\x7f\x9c\x50\x79\x9a\xe3\xcd\x35\x9b\x2a\x10\x30\x78\xf8\x0c\x61\x26\x4f\xa1\x3e\x2a\x05\x0f\x0f\xbd\xaa\xda\xd1\xf2\x3d\xcb\x9b\x9e\x27\xe6\xad\x30\xe1\x1d\x7e\x05\x61\xc7\xb6\x2b\xdb\x6b\xce\x71\x54\xee\xc3\x0b\x39\xba\x7c\x81\x5d\xe5\x09\x11\x63\x90\x0a\x01\x71\xcd\x14\x49\x18\xa7\xdf\x04\xeb\xac\x41\xb4\x01\x1e\x41\xc2\x12\xbe\x4e\x50\x78\xdf\xeb\x9c\x73\xfa\x79\xd0\x3f\xbf\x83\x18\x59\x50\xd1\x88\x69\x00\x73\x11\x09\x93\x4b\x30\x45\x99\x37\x30\x84\xb1\x70\x16\x3f\x9f\xa1\xa9\x8f\x72\x48\x9b\x46\x34\x47\xb3\xfa\xdf\xf7\xca\x1c\x06\x55\x47\xb7\x5a\x19\x5f\x39\xc6\x13\x3e\xd3\x71\x09\x4d\x21\x35\x92\xe0\xed\x44\x3f\xac\x63\xdb\x0e\x6f\xaf\x49\x07\x65\x70\x0a\xb5\xdd\x6c\x30\x44\x39\xd8\x6e\xc7\x8b\xee\xbd\x7e\x56\x60\x8e\x69\x31\x38\x22\x06\x5b\x48\x79\x87\x6c\x41\x4f\xab\x86\x2e\x04\xeb\xba\x09\x7f\xcc\x75\x40\xba\xf6\x15\x4f\x74\x3f\x2f\x9d\x27\x46\x6b\x3c\x5f\xad\x6d\x6c\x0b\xd1\x55\x38\x73\xee\x2b\xd7\xc8\x59\xcb\x3b\xd4\xa5\x6e\x72\x60\x00\xf7\xc1\xe2\x93\x81\x7b\x93\xa0\xcd\x1c\xa9\xd9\xf8\x6b\x39\x7a\x38\xbd\xd7\x46\x40\xef\x65\x03\xbc\x67\xe8\x13\x54\xf7\xa2\x85\x54\x87\x5b\x7b\xf4\x52\x54\xbf\x0d\x50\x16\x61\x22\xe0\xbd\xb0\xbb\x44\xd0\x6f\x2d\x93\xa8\xdf\xc8\x0c\xf4\x0a\x83\x70\x14\x9a\x48\x07\xf8\x37\x30\x27\x92\xd6\x13\xf4\x81\x8b\x7e\x07\x4a\xa0\x02\x78\xa3\x2f\x9b\xd8\xab\xa5\x36\xe1\x3d\x31\x0b\xe9\x1f\x45\x1f\xd4\x18\x82\xf9\x19\xc2\x00\x9d\x3c\xb9\x6e\xf7\xfb\x86\x38\x0e\x89\x0e\x88\x97\x5b\xdf\x68\x34\x8f\x5b\x11\xbb\xfc\x24\xd2\x64\x33\x06\xb9\xac\x2a\xfe\xdf\x00\x00\x00\xff\xff\x4c\x2e\xf9\x29\xc7\x05\x00\x00")

func bashenvCmdBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvCmdBash,
		"bashenv/cmd.bash",
	)
}

func bashenvCmdBash() (*asset, error) {
	bytes, err := bashenvCmdBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/cmd.bash", size: 1479, mode: os.FileMode(420), modTime: time.Unix(1450380776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvFnBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x51\x41\x6e\xc2\x30\x10\x3c\xc7\xaf\x18\xad\x22\x01\xaa\xa2\x08\xae\x34\x3d\x56\xea\x1b\x28\x07\xcb\xac\x89\xd5\xd4\x89\x6c\x03\xaa\x28\x7f\xef\x1a\xd2\x92\x43\x55\x55\xb9\x64\x77\x66\x67\x76\xd6\xca\xfa\x4a\x87\x7d\x9c\x2f\x70\x56\xc5\x8e\x4d\xa7\x03\x63\xc7\xd1\x34\xf4\xe2\xe3\xc0\x26\x41\xc3\x1e\xbc\x49\xae\xf7\xb3\x08\x21\x1f\xde\xd9\xa7\x48\xaa\xe8\x7a\xa3\xbb\xdc\xe9\x9c\xe7\xa6\x9c\xa7\x8f\x81\x51\x2e\xf1\x89\x7d\xe0\x01\xdf\x6a\x63\x59\x1d\x41\x53\x03\x12\xa0\x65\xbd\x43\xb5\x5c\xa8\x82\x4d\xdb\xa3\x62\x50\x79\x1e\x05\xeb\x1a\x35\xbd\x7a\xba\x64\xa2\x3e\xbd\xa1\x7a\x6e\x30\xab\x9b\xfa\x3c\x04\xe7\x13\xe8\x91\xca\x25\x3d\xd1\x65\x26\x78\x0a\xc8\x5c\xc8\xa7\x2e\x2a\xa7\xca\x16\xff\x4e\x95\xa1\xe0\x86\x5c\x51\x1e\xc8\x44\xf9\xe1\xa3\xe4\xa3\x5f\x82\x45\x33\x59\x9e\xd6\xb8\x6e\x5f\xe6\xfe\xe8\xee\xbc\xed\xff\x70\x8f\x13\x7b\xba\x73\xac\x6f\x72\x26\xc4\xb6\x3f\xc5\xfe\x10\x0c\x4b\xbd\xa2\xf1\x3a\x54\x5a\x8f\x72\x3e\xbe\x18\xa4\x5a\xfc\x40\xb8\x01\xd7\xcd\x26\x80\x2a\x9c\xc5\x66\x23\xa3\x77\x49\xc2\x76\xbb\x46\x6a\xd9\xab\xa2\xb8\x25\x13\x5d\x39\xa1\x76\x1d\x2a\x8f\x87\x95\xf4\x6f\xc3\xd6\x49\x9c\xaf\x00\x00\x00\xff\xff\x5c\xaf\x12\xe0\x23\x02\x00\x00")

func bashenvFnBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvFnBash,
		"bashenv/fn.bash",
	)
}

func bashenvFnBash() (*asset, error) {
	bytes, err := bashenvFnBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/fn.bash", size: 547, mode: os.FileMode(420), modTime: time.Unix(1450380776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvPlugnBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\x5d\x4f\xe4\x36\x14\x7d\x4e\x7e\xc5\x95\x95\xae\x96\x4a\xd9\xe9\x52\xf5\x09\x6d\xd5\x55\xbb\xa2\x48\xa8\x1a\xf1\xf1\x44\x11\x32\x89\x93\xb1\x70\xec\x28\x76\x06\x68\xe9\x7f\xef\x75\xec\x64\x9c\xc1\x33\xc0\xf2\x02\x99\xfb\xe5\xe3\x73\xcf\xbd\x49\xca\xa5\x36\x54\x88\x8f\x07\xf0\x6f\x9a\x94\xac\x10\xb4\x63\x50\x32\x5d\x7c\x21\x27\xce\x05\x14\x24\xbb\x87\x56\xf4\x35\x97\x50\x75\xaa\x41\xcb\x31\x37\x70\x79\x76\x4a\x36\x39\x7d\x27\xbe\x90\xec\x33\x01\x49\x1b\x86\x4f\x87\xe8\x2b\x4a\x20\xd9\xf2\xf4\xf2\xf8\xe4\xaf\x9b\xe5\xd7\x8b\x3f\x17\x74\x4d\xb9\xa0\xb7\x82\xa1\xb3\xc6\x12\x85\x50\x92\x61\x0c\x26\x13\xc8\x0e\x87\x8c\x1c\x7e\x85\x45\xc9\xd6\x0b\xd9\x0b\x91\xfe\x97\xa6\xbd\xdc\x03\xf2\x8c\x35\x6a\xcd\xe6\xe8\xc6\x43\xbc\x55\x07\x28\x9d\x65\x00\x9a\x26\x5d\x03\x79\x57\x6d\x41\x64\xd2\xa6\x96\x8b\xcc\x85\xee\x0a\x9b\x0e\xd9\x04\x22\x54\xc1\xb5\x89\xa1\x3c\x45\x3b\x58\x2e\x85\x2a\xa8\x08\x70\xe9\x95\x6a\x0d\xe4\x1a\xec\x65\x6b\xa1\x6e\xd3\xa4\x52\x1d\xb4\xd4\xac\x00\xef\xb3\xe3\xc8\x1f\x8f\xa0\x54\x69\x92\x84\xd5\xf0\x4e\x1f\x6f\xa9\x66\x96\x7e\xc8\x6c\x81\x03\x32\x85\x20\x7d\xa6\xd7\x36\xe4\xea\x0a\x72\x06\xfb\x6e\x0c\xd7\xd7\xf0\xe1\x03\xb0\x62\xa5\xc0\xbb\xe0\xe9\xc9\xfd\x2e\xb9\x1e\x0c\x41\xe9\x35\xeb\x34\x57\xc3\xf1\x05\x35\xee\xe4\x85\xab\xf4\xc9\xa8\x46\xc0\x13\xd8\x7f\x79\xcd\x0c\x10\x4f\x15\x10\x9f\x45\x82\x42\x8e\xa9\x37\x55\xb1\x29\x1d\x6f\xcd\x54\xa9\xed\xb8\x34\xd8\x2a\x80\x1f\xf2\xc3\x9f\x34\xfe\xfd\xc5\xfe\xf9\x6c\x1f\xf5\xdf\x36\x25\x9b\x92\xb3\x11\x03\x3e\x3a\x7e\xec\x93\x2d\x69\xf5\x82\xba\x9c\xba\xd3\x6f\xba\x83\x3d\x36\x1d\xaf\x6b\xd6\xc5\xda\x7c\xe1\x5c\x1a\x56\x4a\xdd\xd9\xfe\x8d\xfc\x3d\x17\xa2\x8d\x18\x64\x78\x04\x7a\xc5\x2b\xb3\x5b\x0a\xae\x29\xdb\x62\x18\x9b\x36\x4a\x81\xad\x91\x42\xcb\x9e\x92\x15\xaf\x73\xf6\xd0\xaa\x0e\x79\x0c\x25\x31\x14\x3a\x40\x9e\x00\x92\xc4\xea\xe0\x61\xa2\x63\x91\x59\x3c\xc4\xb7\x7e\x66\xc4\x98\xdf\xf6\x10\x92\x78\x3a\xf2\x9a\x1a\x76\x4f\x1f\x21\x48\x42\xb2\x1c\xcc\x18\x57\xdf\x06\x0f\xae\x92\x69\xce\xa2\x33\xda\xdc\x95\xbc\x83\xbc\x8d\x4f\x29\x06\x08\x09\x79\xa5\x5f\x9c\xce\x97\xa7\x9c\x09\x45\xcb\xf1\x1a\x16\xbb\x17\x7b\x0c\xfc\x1f\xce\xf5\x7e\xf4\xb8\x5b\xde\x0e\xcc\xf7\x18\x67\x21\x86\xed\x18\x47\xc4\x8b\xc6\x05\xf6\x1d\x1d\x26\x24\x8a\x71\xb6\xae\x71\xf2\xe6\x68\x5c\x81\x61\x02\xc9\x6c\x04\x03\x5a\x6d\x01\x12\xc0\x72\xd2\x8b\xb6\xdc\x89\xf2\xf5\xe0\x5e\x0b\xc9\xab\x9d\x84\xab\xd8\xa3\xd1\x71\x92\xce\xbf\x93\x24\xc0\x31\xeb\xed\xe3\xcf\x18\x39\xac\xc4\x5c\xda\x55\x62\xad\x13\x1c\xcd\xf6\x82\x8e\x92\xc7\x25\x8f\x02\x3d\x41\x3b\xa7\x82\xff\x83\x62\xc3\x7d\xd2\xb4\xe6\x71\x04\x6e\x77\xe4\x4e\x8d\xa1\xc3\xa8\xbe\x58\xed\x01\xf2\x0a\x79\xee\x08\x08\x5f\xe3\x03\x09\x01\xcc\xd2\x83\x5c\x22\x48\x19\x42\xdd\x5e\x61\xc3\xb5\x6f\xb4\xea\xbb\x22\x3a\x63\xe7\x83\x07\xdb\xd3\x34\x54\x96\x1a\xec\x32\x1c\xa2\xb7\x5e\xed\xef\xd9\x9b\xe3\x26\xac\x82\x4d\xf8\x7c\x65\x7e\xd2\x2b\x12\xbe\x15\x89\x03\x0d\x2f\xa4\xec\x7d\x8b\x34\x94\x4b\x77\x6b\xab\x96\x9c\x29\x68\x79\xcb\x2a\xe4\xf5\x08\x10\x11\xc9\x2e\xce\xbe\xfe\xfe\x6d\x3c\x76\x88\x79\x48\x71\x1e\x9a\x72\x54\xbb\xff\x28\x9a\xd9\xa6\x4f\xa5\x99\xd5\x7e\x95\xcc\x0c\x7e\x67\xcf\x6c\x8e\x98\x99\xc9\x2f\xc0\x99\xcd\x37\x6c\xe4\x80\x84\xce\x5c\x6a\x3f\x4d\x40\x96\xf1\xe1\x0a\x2a\x6d\xb6\x58\xcc\xec\x7e\xc5\x3c\x7a\x2b\xc1\x4e\x4e\x9a\x38\x13\x02\x20\x64\x7c\xf9\xfc\x1f\x00\x00\xff\xff\xb7\xeb\x7b\x03\xdc\x0a\x00\x00")

func bashenvPlugnBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvPlugnBash,
		"bashenv/plugn.bash",
	)
}

func bashenvPlugnBash() (*asset, error) {
	bytes, err := bashenvPlugnBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/plugn.bash", size: 2780, mode: os.FileMode(420), modTime: time.Unix(1450891295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bashenv/bash.bash": bashenvBashBash,
	"bashenv/cmd.bash": bashenvCmdBash,
	"bashenv/fn.bash": bashenvFnBash,
	"bashenv/plugn.bash": bashenvPlugnBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bashenv": &bintree{nil, map[string]*bintree{
		"bash.bash": &bintree{bashenvBashBash, map[string]*bintree{}},
		"cmd.bash": &bintree{bashenvCmdBash, map[string]*bintree{}},
		"fn.bash": &bintree{bashenvFnBash, map[string]*bintree{}},
		"plugn.bash": &bintree{bashenvPlugnBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

